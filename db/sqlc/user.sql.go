// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, email, password, role
) VALUES (
  $1, $2, $3, $4
)
RETURNING createdat, updatedat, username, email, password, role, status, is_email_verified
`

type CreateUserParams struct {
	Username string       `json:"username"`
	Email    string       `json:"email"`
	Password string       `json:"password"`
	Role     NullUserRole `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.Createdat,
		&i.Updatedat,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Status,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT createdat, updatedat, username, email, password, role, status, is_email_verified FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Createdat,
		&i.Updatedat,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Status,
		&i.IsEmailVerified,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  password = COALESCE($1, password),
  email = COALESCE($2, email),
    updatedAt = COALESCE($3, updatedAt),
  is_email_verified = COALESCE($4, is_email_verified)
WHERE
  username = $5
RETURNING createdat, updatedat, username, email, password, role, status, is_email_verified
`

type UpdateUserParams struct {
	Password        pgtype.Text        `json:"password"`
	Email           pgtype.Text        `json:"email"`
	Updatedat       pgtype.Timestamptz `json:"updatedat"`
	IsEmailVerified pgtype.Bool        `json:"is_email_verified"`
	Username        string             `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Password,
		arg.Email,
		arg.Updatedat,
		arg.IsEmailVerified,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Createdat,
		&i.Updatedat,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Status,
		&i.IsEmailVerified,
	)
	return i, err
}

const updateUserStatus = `-- name: UpdateUserStatus :one
UPDATE users
SET  status = $2
WHERE username = $1
RETURNING createdat, updatedat, username, email, password, role, status, is_email_verified
`

type UpdateUserStatusParams struct {
	Username string         `json:"username"`
	Status   NullUserStatus `json:"status"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserStatus, arg.Username, arg.Status)
	var i User
	err := row.Scan(
		&i.Createdat,
		&i.Updatedat,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.Status,
		&i.IsEmailVerified,
	)
	return i, err
}
