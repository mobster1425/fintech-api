// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: wallet.sql

package db

import (
	"context"
)

const addWalletBalance = `-- name: AddWalletBalance :one
UPDATE wallet
SET balance = balance + $1
WHERE id = $2
RETURNING id, createdat, updatedat, owner, balance
`

type AddWalletBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddWalletBalance(ctx context.Context, arg AddWalletBalanceParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, addWalletBalance, arg.Amount, arg.ID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Owner,
		&i.Balance,
	)
	return i, err
}

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallet (
  owner,
  balance
) VALUES (
  $1, $2
) RETURNING id, createdat, updatedat, owner, balance
`

type CreateWalletParams struct {
	Owner   string `json:"owner"`
	Balance int64  `json:"balance"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, createWallet, arg.Owner, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Owner,
		&i.Balance,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT id, createdat, updatedat, owner, balance FROM wallet
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, id int64) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWallet, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Owner,
		&i.Balance,
	)
	return i, err
}

const getWalletbyOwner = `-- name: GetWalletbyOwner :one
SELECT id, createdat, updatedat, owner, balance FROM wallet
WHERE owner = $1 LIMIT 1
`

func (q *Queries) GetWalletbyOwner(ctx context.Context, owner string) (Wallet, error) {
	row := q.db.QueryRow(ctx, getWalletbyOwner, owner)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Owner,
		&i.Balance,
	)
	return i, err
}

const updateWallet = `-- name: UpdateWallet :one
UPDATE wallet
SET balance = $2
WHERE id = $1
RETURNING id, createdat, updatedat, owner, balance
`

type UpdateWalletParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.db.QueryRow(ctx, updateWallet, arg.ID, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Owner,
		&i.Balance,
	)
	return i, err
}
