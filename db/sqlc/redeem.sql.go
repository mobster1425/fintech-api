// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: redeem.sql

package db

import (
	"context"
)

const createRedeem = `-- name: CreateRedeem :one
INSERT INTO redeem (
  code,
transactionId
) VALUES (
  $1, $2
) RETURNING id, createdat, updatedat, code, transactionid
`

type CreateRedeemParams struct {
	Code          string `json:"code"`
	Transactionid int64  `json:"transactionid"`
}

func (q *Queries) CreateRedeem(ctx context.Context, arg CreateRedeemParams) (Redeem, error) {
	row := q.db.QueryRow(ctx, createRedeem, arg.Code, arg.Transactionid)
	var i Redeem
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Code,
		&i.Transactionid,
	)
	return i, err
}

const deleteRedeem = `-- name: DeleteRedeem :exec
DELETE FROM redeem
WHERE id = $1
`

func (q *Queries) DeleteRedeem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRedeem, id)
	return err
}

const getRedeem = `-- name: GetRedeem :one
SELECT id, createdat, updatedat, code, transactionid FROM redeem
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRedeem(ctx context.Context, id int64) (Redeem, error) {
	row := q.db.QueryRow(ctx, getRedeem, id)
	var i Redeem
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Code,
		&i.Transactionid,
	)
	return i, err
}

const getRedeemWithCode = `-- name: GetRedeemWithCode :one
SELECT id, createdat, updatedat, code, transactionid FROM redeem
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetRedeemWithCode(ctx context.Context, code string) (Redeem, error) {
	row := q.db.QueryRow(ctx, getRedeemWithCode, code)
	var i Redeem
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.Code,
		&i.Transactionid,
	)
	return i, err
}
