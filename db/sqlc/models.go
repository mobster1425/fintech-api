// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type TransactionStatus string

const (
	TransactionStatusINIT       TransactionStatus = "INIT"
	TransactionStatusPROCESSING TransactionStatus = "PROCESSING"
	TransactionStatusPENDING    TransactionStatus = "PENDING"
	TransactionStatusSUCCESS    TransactionStatus = "SUCCESS"
	TransactionStatusCANCELED   TransactionStatus = "CANCELED"
	TransactionStatusREJECTED   TransactionStatus = "REJECTED"
)

func (e *TransactionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionStatus(s)
	case string:
		*e = TransactionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionStatus: %T", src)
	}
	return nil
}

type NullTransactionStatus struct {
	TransactionStatus TransactionStatus `json:"transaction_status"`
	Valid             bool              `json:"valid"` // Valid is true if TransactionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionStatus), nil
}

type TransactionType string

const (
	TransactionTypeTRANSFER       TransactionType = "TRANSFER"
	TransactionTypeREQUEST        TransactionType = "REQUEST"
	TransactionTypeREDEEM         TransactionType = "REDEEM"
	TransactionTypePAYMENT        TransactionType = "PAYMENT"
	TransactionTypePAYMENTVOUCHER TransactionType = "PAYMENT_VOUCHER"
	TransactionTypeWITHDRAW       TransactionType = "WITHDRAW"
	TransactionTypeDEPOSIT        TransactionType = "DEPOSIT"
)

func (e *TransactionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransactionType(s)
	case string:
		*e = TransactionType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransactionType: %T", src)
	}
	return nil
}

type NullTransactionType struct {
	TransactionType TransactionType `json:"transaction_type"`
	Valid           bool            `json:"valid"` // Valid is true if TransactionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactionType) Scan(value interface{}) error {
	if value == nil {
		ns.TransactionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransactionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransactionType), nil
}

type UserRole string

const (
	UserRoleCustomer UserRole = "customer"
	UserRoleMerchant UserRole = "merchant"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserStatus string

const (
	UserStatusInactive UserStatus = "inactive"
	UserStatusActive   UserStatus = "active"
	UserStatusBanned   UserStatus = "banned"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type VoucherStatus string

const (
	VoucherStatusAVAILABLE   VoucherStatus = "AVAILABLE"
	VoucherStatusUNAVAILABLE VoucherStatus = "UNAVAILABLE"
)

func (e *VoucherStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VoucherStatus(s)
	case string:
		*e = VoucherStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for VoucherStatus: %T", src)
	}
	return nil
}

type NullVoucherStatus struct {
	VoucherStatus VoucherStatus `json:"voucher_status"`
	Valid         bool          `json:"valid"` // Valid is true if VoucherStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVoucherStatus) Scan(value interface{}) error {
	if value == nil {
		ns.VoucherStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VoucherStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVoucherStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VoucherStatus), nil
}

type VoucherType string

const (
	VoucherTypeFIXED   VoucherType = "FIXED"
	VoucherTypePERCENT VoucherType = "PERCENT"
)

func (e *VoucherType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VoucherType(s)
	case string:
		*e = VoucherType(s)
	default:
		return fmt.Errorf("unsupported scan type for VoucherType: %T", src)
	}
	return nil
}

type NullVoucherType struct {
	VoucherType VoucherType `json:"voucher_type"`
	Valid       bool        `json:"valid"` // Valid is true if VoucherType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVoucherType) Scan(value interface{}) error {
	if value == nil {
		ns.VoucherType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VoucherType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVoucherType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VoucherType), nil
}

type Redeem struct {
	ID            int64     `json:"id"`
	Createdat     time.Time `json:"createdat"`
	Updatedat     time.Time `json:"updatedat"`
	Code          string    `json:"code"`
	Transactionid int64     `json:"transactionid"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type Transaction struct {
	ID               int64                 `json:"id"`
	Createdat        time.Time             `json:"createdat"`
	Updatedat        time.Time             `json:"updatedat"`
	SenderWalletID   int64                 `json:"sender_wallet_id"`
	ReceiverWalletID pgtype.Int8           `json:"receiver_wallet_id"`
	Charge           pgtype.Int8           `json:"charge"`
	Amount           pgtype.Int8           `json:"amount"`
	Sendamount       pgtype.Int8           `json:"sendamount"`
	Receiveamount    pgtype.Int8           `json:"receiveamount"`
	Note             pgtype.Text           `json:"note"`
	Type             NullTransactionType   `json:"type"`
	Status           NullTransactionStatus `json:"status"`
}

type User struct {
	Createdat       time.Time      `json:"createdat"`
	Updatedat       time.Time      `json:"updatedat"`
	Username        string         `json:"username"`
	Email           string         `json:"email"`
	Password        string         `json:"password"`
	Role            NullUserRole   `json:"role"`
	Status          NullUserStatus `json:"status"`
	IsEmailVerified bool           `json:"is_email_verified"`
}

type VerifyEmail struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
	IsUsed     bool      `json:"is_used"`
	CreatedAt  time.Time `json:"created_at"`
	ExpiredAt  time.Time `json:"expired_at"`
}

type Voucher struct {
	ID                int64         `json:"id"`
	Createdat         time.Time     `json:"createdat"`
	Updatedat         time.Time     `json:"updatedat"`
	CreatorUsername   pgtype.Text   `json:"creator_username"`
	Value             int64         `json:"value"`
	Type              VoucherType   `json:"type"`
	ApplyforUsername  pgtype.Text   `json:"applyfor_username"`
	Maxusage          int32         `json:"maxusage"`
	Maxusagebyaccount int32         `json:"maxusagebyaccount"`
	Status            VoucherStatus `json:"status"`
	Expireat          time.Time     `json:"expireat"`
	Code              string        `json:"code"`
	Usedby            []string      `json:"usedby"`
}

type Wallet struct {
	ID        int64     `json:"id"`
	Createdat time.Time `json:"createdat"`
	Updatedat time.Time `json:"updatedat"`
	Owner     string    `json:"owner"`
	Balance   int64     `json:"balance"`
}
