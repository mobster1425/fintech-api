// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: voucher.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVoucher = `-- name: CreateVoucher :one
INSERT INTO voucher (
    value,
   applyFor_username,
type,
    maxUsage,
maxUsageByAccount,
status,
expireAt,
code,
creator_username
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, createdat, updatedat, creator_username, value, type, applyfor_username, maxusage, maxusagebyaccount, status, expireat, code, usedby
`

type CreateVoucherParams struct {
	Value             int64         `json:"value"`
	ApplyforUsername  pgtype.Text   `json:"applyfor_username"`
	Type              VoucherType   `json:"type"`
	Maxusage          int32         `json:"maxusage"`
	Maxusagebyaccount int32         `json:"maxusagebyaccount"`
	Status            VoucherStatus `json:"status"`
	Expireat          time.Time     `json:"expireat"`
	Code              string        `json:"code"`
	CreatorUsername   pgtype.Text   `json:"creator_username"`
}

func (q *Queries) CreateVoucher(ctx context.Context, arg CreateVoucherParams) (Voucher, error) {
	row := q.db.QueryRow(ctx, createVoucher,
		arg.Value,
		arg.ApplyforUsername,
		arg.Type,
		arg.Maxusage,
		arg.Maxusagebyaccount,
		arg.Status,
		arg.Expireat,
		arg.Code,
		arg.CreatorUsername,
	)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.CreatorUsername,
		&i.Value,
		&i.Type,
		&i.ApplyforUsername,
		&i.Maxusage,
		&i.Maxusagebyaccount,
		&i.Status,
		&i.Expireat,
		&i.Code,
		&i.Usedby,
	)
	return i, err
}

const deleteVoucher = `-- name: DeleteVoucher :exec
DELETE FROM voucher
WHERE id = $1
`

func (q *Queries) DeleteVoucher(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteVoucher, id)
	return err
}

const getVoucher = `-- name: GetVoucher :one
SELECT id, createdat, updatedat, creator_username, value, type, applyfor_username, maxusage, maxusagebyaccount, status, expireat, code, usedby FROM voucher
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVoucher(ctx context.Context, id int64) (Voucher, error) {
	row := q.db.QueryRow(ctx, getVoucher, id)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.CreatorUsername,
		&i.Value,
		&i.Type,
		&i.ApplyforUsername,
		&i.Maxusage,
		&i.Maxusagebyaccount,
		&i.Status,
		&i.Expireat,
		&i.Code,
		&i.Usedby,
	)
	return i, err
}

const getVoucherWithCode = `-- name: GetVoucherWithCode :one
SELECT id, createdat, updatedat, creator_username, value, type, applyfor_username, maxusage, maxusagebyaccount, status, expireat, code, usedby FROM voucher
WHERE creator_username = $1 AND code = $2 
LIMIT 1
`

type GetVoucherWithCodeParams struct {
	CreatorUsername pgtype.Text `json:"creator_username"`
	Code            string      `json:"code"`
}

func (q *Queries) GetVoucherWithCode(ctx context.Context, arg GetVoucherWithCodeParams) (Voucher, error) {
	row := q.db.QueryRow(ctx, getVoucherWithCode, arg.CreatorUsername, arg.Code)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.CreatorUsername,
		&i.Value,
		&i.Type,
		&i.ApplyforUsername,
		&i.Maxusage,
		&i.Maxusagebyaccount,
		&i.Status,
		&i.Expireat,
		&i.Code,
		&i.Usedby,
	)
	return i, err
}

const listVouchers = `-- name: ListVouchers :many
SELECT id, createdat, updatedat, creator_username, value, type, applyfor_username, maxusage, maxusagebyaccount, status, expireat, code, usedby FROM voucher
WHERE 
   creator_username = $1 
   
ORDER BY id
`

func (q *Queries) ListVouchers(ctx context.Context, creatorUsername pgtype.Text) ([]Voucher, error) {
	rows, err := q.db.Query(ctx, listVouchers, creatorUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Voucher{}
	for rows.Next() {
		var i Voucher
		if err := rows.Scan(
			&i.ID,
			&i.Createdat,
			&i.Updatedat,
			&i.CreatorUsername,
			&i.Value,
			&i.Type,
			&i.ApplyforUsername,
			&i.Maxusage,
			&i.Maxusagebyaccount,
			&i.Status,
			&i.Expireat,
			&i.Code,
			&i.Usedby,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVoucherStatus = `-- name: UpdateVoucherStatus :one
UPDATE voucher
SET status = $2
WHERE id = $1
RETURNING id, createdat, updatedat, creator_username, value, type, applyfor_username, maxusage, maxusagebyaccount, status, expireat, code, usedby
`

type UpdateVoucherStatusParams struct {
	ID     int64         `json:"id"`
	Status VoucherStatus `json:"status"`
}

func (q *Queries) UpdateVoucherStatus(ctx context.Context, arg UpdateVoucherStatusParams) (Voucher, error) {
	row := q.db.QueryRow(ctx, updateVoucherStatus, arg.ID, arg.Status)
	var i Voucher
	err := row.Scan(
		&i.ID,
		&i.Createdat,
		&i.Updatedat,
		&i.CreatorUsername,
		&i.Value,
		&i.Type,
		&i.ApplyforUsername,
		&i.Maxusage,
		&i.Maxusagebyaccount,
		&i.Status,
		&i.Expireat,
		&i.Code,
		&i.Usedby,
	)
	return i, err
}

const updateVoucherUsedBy = `-- name: UpdateVoucherUsedBy :exec
UPDATE voucher
SET usedby = COALESCE(UsedBy, ARRAY[]::VARCHAR[]) || ($2)::VARCHAR[]
WHERE id = $1
`

type UpdateVoucherUsedByParams struct {
	ID      int64    `json:"id"`
	Column2 []string `json:"column_2"`
}

func (q *Queries) UpdateVoucherUsedBy(ctx context.Context, arg UpdateVoucherUsedByParams) error {
	_, err := q.db.Exec(ctx, updateVoucherUsedBy, arg.ID, arg.Column2)
	return err
}
