// Code generated by MockGen. DO NOT EDIT.
// Source: feyin/digital-fintech-api/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "feyin/digital-fintech-api/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddWalletBalance mocks base method.
func (m *MockStore) AddWalletBalance(arg0 context.Context, arg1 db.AddWalletBalanceParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWalletBalance", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWalletBalance indicates an expected call of AddWalletBalance.
func (mr *MockStoreMockRecorder) AddWalletBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWalletBalance", reflect.TypeOf((*MockStore)(nil).AddWalletBalance), arg0, arg1)
}

// CreateRedeem mocks base method.
func (m *MockStore) CreateRedeem(arg0 context.Context, arg1 db.CreateRedeemParams) (db.Redeem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRedeem", arg0, arg1)
	ret0, _ := ret[0].(db.Redeem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRedeem indicates an expected call of CreateRedeem.
func (mr *MockStoreMockRecorder) CreateRedeem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRedeem", reflect.TypeOf((*MockStore)(nil).CreateRedeem), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(arg0 context.Context, arg1 db.CreateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams, arg2 db.CreateWalletTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1, arg2)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// CreateVoucher mocks base method.
func (m *MockStore) CreateVoucher(arg0 context.Context, arg1 db.CreateVoucherParams) (db.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVoucher", arg0, arg1)
	ret0, _ := ret[0].(db.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVoucher indicates an expected call of CreateVoucher.
func (mr *MockStoreMockRecorder) CreateVoucher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVoucher", reflect.TypeOf((*MockStore)(nil).CreateVoucher), arg0, arg1)
}

// CreateWallet mocks base method.
func (m *MockStore) CreateWallet(arg0 context.Context, arg1 db.CreateWalletParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockStoreMockRecorder) CreateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockStore)(nil).CreateWallet), arg0, arg1)
}

// DeleteRedeem mocks base method.
func (m *MockStore) DeleteRedeem(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRedeem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRedeem indicates an expected call of DeleteRedeem.
func (mr *MockStoreMockRecorder) DeleteRedeem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRedeem", reflect.TypeOf((*MockStore)(nil).DeleteRedeem), arg0, arg1)
}

// DeleteVoucher mocks base method.
func (m *MockStore) DeleteVoucher(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoucher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVoucher indicates an expected call of DeleteVoucher.
func (mr *MockStoreMockRecorder) DeleteVoucher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoucher", reflect.TypeOf((*MockStore)(nil).DeleteVoucher), arg0, arg1)
}

// GetRedeem mocks base method.
func (m *MockStore) GetRedeem(arg0 context.Context, arg1 int64) (db.Redeem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedeem", arg0, arg1)
	ret0, _ := ret[0].(db.Redeem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedeem indicates an expected call of GetRedeem.
func (mr *MockStoreMockRecorder) GetRedeem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedeem", reflect.TypeOf((*MockStore)(nil).GetRedeem), arg0, arg1)
}

// GetRedeemWithCode mocks base method.
func (m *MockStore) GetRedeemWithCode(arg0 context.Context, arg1 string) (db.Redeem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedeemWithCode", arg0, arg1)
	ret0, _ := ret[0].(db.Redeem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedeemWithCode indicates an expected call of GetRedeemWithCode.
func (mr *MockStoreMockRecorder) GetRedeemWithCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedeemWithCode", reflect.TypeOf((*MockStore)(nil).GetRedeemWithCode), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockStore) GetTransaction(arg0 context.Context, arg1 int64) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockStoreMockRecorder) GetTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockStore)(nil).GetTransaction), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetVoucher mocks base method.
func (m *MockStore) GetVoucher(arg0 context.Context, arg1 int64) (db.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoucher", arg0, arg1)
	ret0, _ := ret[0].(db.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoucher indicates an expected call of GetVoucher.
func (mr *MockStoreMockRecorder) GetVoucher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoucher", reflect.TypeOf((*MockStore)(nil).GetVoucher), arg0, arg1)
}

// GetVoucherWithCode mocks base method.
func (m *MockStore) GetVoucherWithCode(arg0 context.Context, arg1 db.GetVoucherWithCodeParams) (db.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoucherWithCode", arg0, arg1)
	ret0, _ := ret[0].(db.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoucherWithCode indicates an expected call of GetVoucherWithCode.
func (mr *MockStoreMockRecorder) GetVoucherWithCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoucherWithCode", reflect.TypeOf((*MockStore)(nil).GetVoucherWithCode), arg0, arg1)
}

// GetWallet mocks base method.
func (m *MockStore) GetWallet(arg0 context.Context, arg1 int64) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockStoreMockRecorder) GetWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockStore)(nil).GetWallet), arg0, arg1)
}

// GetWalletbyOwner mocks base method.
func (m *MockStore) GetWalletbyOwner(arg0 context.Context, arg1 string) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletbyOwner", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletbyOwner indicates an expected call of GetWalletbyOwner.
func (mr *MockStoreMockRecorder) GetWalletbyOwner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletbyOwner", reflect.TypeOf((*MockStore)(nil).GetWalletbyOwner), arg0, arg1)
}

// ListTransactions mocks base method.
func (m *MockStore) ListTransactions(arg0 context.Context, arg1 db.ListTransactionsParams) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockStoreMockRecorder) ListTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockStore)(nil).ListTransactions), arg0, arg1)
}

// ListVouchers mocks base method.
func (m *MockStore) ListVouchers(arg0 context.Context, arg1 pgtype.Text) ([]db.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVouchers", arg0, arg1)
	ret0, _ := ret[0].([]db.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVouchers indicates an expected call of ListVouchers.
func (mr *MockStoreMockRecorder) ListVouchers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVouchers", reflect.TypeOf((*MockStore)(nil).ListVouchers), arg0, arg1)
}

// RedeemTx mocks base method.
func (m *MockStore) RedeemTx(arg0 context.Context, arg1 db.TransactionParams, arg2 bool) (db.RedeemTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeemTx", arg0, arg1, arg2)
	ret0, _ := ret[0].(db.RedeemTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RedeemTx indicates an expected call of RedeemTx.
func (mr *MockStoreMockRecorder) RedeemTx(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeemTx", reflect.TypeOf((*MockStore)(nil).RedeemTx), arg0, arg1, arg2)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 db.TransactionParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// TransferTxForVoucher mocks base method.
func (m *MockStore) TransferTxForVoucher(arg0 context.Context, arg1 db.TransactionParams) (db.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTxForVoucher", arg0, arg1)
	ret0, _ := ret[0].(db.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTxForVoucher indicates an expected call of TransferTxForVoucher.
func (mr *MockStoreMockRecorder) TransferTxForVoucher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTxForVoucher", reflect.TypeOf((*MockStore)(nil).TransferTxForVoucher), arg0, arg1)
}

// UpdateTransactionReceiverWallet mocks base method.
func (m *MockStore) UpdateTransactionReceiverWallet(arg0 context.Context, arg1 db.UpdateTransactionReceiverWalletParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionReceiverWallet", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionReceiverWallet indicates an expected call of UpdateTransactionReceiverWallet.
func (mr *MockStoreMockRecorder) UpdateTransactionReceiverWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionReceiverWallet", reflect.TypeOf((*MockStore)(nil).UpdateTransactionReceiverWallet), arg0, arg1)
}

// UpdateTransactionStatus mocks base method.
func (m *MockStore) UpdateTransactionStatus(arg0 context.Context, arg1 db.UpdateTransactionStatusParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockStoreMockRecorder) UpdateTransactionStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockStore)(nil).UpdateTransactionStatus), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserStatus mocks base method.
func (m *MockStore) UpdateUserStatus(arg0 context.Context, arg1 db.UpdateUserStatusParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStatus", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserStatus indicates an expected call of UpdateUserStatus.
func (mr *MockStoreMockRecorder) UpdateUserStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatus", reflect.TypeOf((*MockStore)(nil).UpdateUserStatus), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), arg0, arg1)
}

// UpdateVoucherStatus mocks base method.
func (m *MockStore) UpdateVoucherStatus(arg0 context.Context, arg1 db.UpdateVoucherStatusParams) (db.Voucher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoucherStatus", arg0, arg1)
	ret0, _ := ret[0].(db.Voucher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVoucherStatus indicates an expected call of UpdateVoucherStatus.
func (mr *MockStoreMockRecorder) UpdateVoucherStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoucherStatus", reflect.TypeOf((*MockStore)(nil).UpdateVoucherStatus), arg0, arg1)
}

// UpdateVoucherUsedBy mocks base method.
func (m *MockStore) UpdateVoucherUsedBy(arg0 context.Context, arg1 db.UpdateVoucherUsedByParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVoucherUsedBy", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVoucherUsedBy indicates an expected call of UpdateVoucherUsedBy.
func (mr *MockStoreMockRecorder) UpdateVoucherUsedBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVoucherUsedBy", reflect.TypeOf((*MockStore)(nil).UpdateVoucherUsedBy), arg0, arg1)
}

// UpdateWallet mocks base method.
func (m *MockStore) UpdateWallet(arg0 context.Context, arg1 db.UpdateWalletParams) (db.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", arg0, arg1)
	ret0, _ := ret[0].(db.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet.
func (mr *MockStoreMockRecorder) UpdateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockStore)(nil).UpdateWallet), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockStore) VerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockStoreMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyEmailTx), arg0, arg1)
}
